// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace task1.Models
{
    public partial class ITIContext : DbContext
    {
        public ITIContext()
        {
        }

        public ITIContext(DbContextOptions<ITIContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<Stud_Course> Stud_Course { get; set; }
        public virtual DbSet<Student> Student { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ITI;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.Crs_Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Stud_Course>(entity =>
            {
                entity.HasKey(e => new { e.Crs_Id, e.St_Id });

                entity.HasOne(d => d.Crs_)
                    .WithMany(p => p.Stud_Course)
                    .HasForeignKey(d => d.Crs_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stud_Course_Course");

                entity.HasOne(d => d.St_)
                    .WithMany(p => p.Stud_Course)
                    .HasForeignKey(d => d.St_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stud_Course_Student");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.St_Id).ValueGeneratedNever();

                entity.Property(e => e.St_Lname).IsFixedLength();

                entity.HasOne(d => d.St_superNavigation)
                    .WithMany(p => p.InverseSt_superNavigation)
                    .HasForeignKey(d => d.St_super)
                    .HasConstraintName("FK_Student_Student");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}